{"version":3,"sources":["components/Nav/index.js","components/Grid/index.js","components/Card/index.js","components/CardTable/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","Container","fluid","children","Row","Col","size","split","map","join","Card","props","data-name","name","onClick","handleCardClick","clickState","src","image","CardTable","state","Photos","correctGuesses","guessesLeft","i","filter","card","index","determineGuess","clicked","setState","console","log","this","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8uDAaeA,MAVf,WACE,OACE,yBAAKC,UAAU,iDACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,iB,qDCDC,SAASC,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjC,OAAO,yBAAKJ,UAAS,mBAAcG,EAAQ,SAAW,KAAOC,GAIxD,SAASC,EAAT,GAAmC,IAApBF,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC3B,OAAO,yBAAKJ,UAAS,aAAQG,EAAQ,SAAW,KAAOC,GAKlD,SAASE,EAAT,GAAkC,IAAnBC,EAAkB,EAAlBA,KAAMH,EAAY,EAAZA,SAC1B,OACE,yBACEJ,UAAWO,EACRC,MAAM,KACNC,KAAI,SAAAF,GAAI,MAAI,OAASA,KACrBG,KAAK,MAEPN,GCIQO,MApBf,SAAcC,GACZ,OACE,yBAEIC,YAAWD,EAAME,KACjBC,QAAS,kBAAMH,EAAMI,gBAAgBJ,EAAME,QAE7C,kBAACZ,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,CAAKC,KAAK,YAAYP,UAAU,WAE5B,2BAAIY,EAAMK,YACV,yBAAKjB,UAAU,YAAYkB,IAAKN,EAAMO,a,OCgErCC,E,2MA3EXC,MAAQ,CACNC,SACAC,eAAgB,EAChBC,YAAa,I,EAInBR,gBAAkB,SAAAF,GAEhB,IACIW,EADa,EAAKJ,MAAMC,OAAOI,QAAO,SAAAC,GAAI,OAAIA,EAAKb,MAAQA,KAC9C,GAAGc,MAEhBC,EAAiBP,EAAOG,GAAGK,QAgB/B,WAd8B,EAAKC,SAAS,CAAEP,YAAa,EAAKH,MAAMG,YAAc,IAkBlFQ,QAAQC,IAAI,+BAbd,WAN4B,EAAKF,SAAS,CAAER,eAAgB,EAAKF,MAAME,eAAiB,IAQtFD,EAAOG,GAAGK,SAAU,EACpBR,EAAOG,GAAGR,WAAa,WACvBe,QAAQC,IAAI,aARdJ,IA4BAG,QAAQC,IAAR,mBAAwB,EAAKZ,MAAME,eAAnC,mCAA4E,EAAKF,MAAMG,cACvFQ,QAAQC,IAAIX,I,wEAQF,IAAD,OACP,OACE,yBAAKtB,UAAU,2BACb,yEACA,kBAACE,EAAD,KACE,kBAACG,EAAD,KACG6B,KAAKb,MAAMC,OAAOb,KAAI,SAAAkB,GAAI,OACvB,kBAAC,EAAD,CACEX,gBAAiB,EAAKA,gBACtBG,MAAOQ,EAAKR,MACZL,KAAMa,EAAKb,KACXgB,QAASH,EAAKG,QACdK,IAAKR,EAAKQ,IACVlB,WAAYU,EAAKV,uB,GAlEXmB,aCMTC,MATf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.83adf14f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav() {\n  return (\n    <nav className=\"memNavBar navbar navbar-expand-lg navbar-dark\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Memory Game\n      </a>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./style.css\";\nimport { PromiseProvider } from \"mongoose\";\nimport { Container, Row, Col } from \"../Grid\";\n\n\n\n\nfunction Card(props) {\n  return (\n    <div \n         \n        data-name={props.name}\n        onClick={() => props.handleCardClick(props.name)}\n      >\n      <Container>\n        <Row>\n          <Col size=\"xs-2 sm-2\" className=\"memCard\">\n              {/* <h1>{props.name}</h1> */}\n              <p>{props.clickState}</p>\n              <img className=\"cardImage\" src={props.image}/>\n           </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default Card;","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport Card from \"../Card\";\nimport Photos from \"../Photos.json\";\nimport { Container, Row, Col } from \"../Grid\";\n\n\n\nclass CardTable extends Component {\n    state = {\n      Photos,\n      correctGuesses: 0,\n      guessesLeft: 10\n    };\n  \n\nhandleCardClick = name => {\n  \n  const thisCard = this.state.Photos.filter(card => card.name == name);\n  let i = thisCard[0].index;\n  \n  let determineGuess = Photos[i].clicked ? guessedWrong : guessedRight;\n  const increaseScore = () => this.setState({ correctGuesses: this.state.correctGuesses + 1 })\n  const decreaseGuesses = () => this.setState({ guessesLeft: this.state.guessesLeft - 1 })\n  determineGuess();\n  // checkScore();\n  // function announcer(){console.log(`There are ${this.state.correctGuesses} correct guesses and ${this.state.guessesLeft} guesses left`)}\n  \n  function guessedRight(){\n    increaseScore();\n    Photos[i].clicked = true;\n    Photos[i].clickState = \"Clicked!\";\n    console.log(\"Correct!\")\n    // correctGuesses = 99;\n    // announcer();\n  }\n\n  function guessedWrong(){\n    decreaseGuesses();\n    \n    // announcer();\n    console.log(\"Already selected this one!\");\n  }\n\n  // function checkScore(){\n  //   let cardsLeft = Photos.length;\n  //   for (var j = 0; Photos.length; j++){\n  //     if (Photos[j].clicked){ cardsLeft-- };\n  //   }\n  //   console.log(cardsLeft);\n  // }\n  \n  console.log(`Correct: ${this.state.correctGuesses}    ||    Guesses Left: ${this.state.guessesLeft}`)\n  console.log(Photos)\n\n\n};\n\n\n\n\n  render() {\n    return (\n      <div className=\"list-overflow-container\">\n        <h1>Open the console to see what is happening</h1>\n        <Container>\n          <Row>\n            {this.state.Photos.map(card => (\n                <Card\n                  handleCardClick={this.handleCardClick}\n                  image={card.image}\n                  name={card.name}\n                  clicked={card.clicked}\n                  key={card.key}\n                  clickState={card.clickState}\n                />\n            ))}\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default CardTable\n\n\n","import React from 'react';\nimport './App.css';\nimport Nav from \"./components/Nav\";\nimport CardTable from \"./components/CardTable\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <CardTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}